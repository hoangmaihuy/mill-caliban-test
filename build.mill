//| mvnDeps:
//| - io.github.hoangmaihuy::mill-caliban::0.3.0-RC1

import mill.*
import mill.scalalib.*
import mill.scalajslib.*
import io.github.hoangmaihuy.mill.caliban.*

object codegen extends Module {

  object jvm extends ScalaModule with SharedModule

  object js extends ScalaJSModule with SharedModule {
    override def scalaJSVersion = "1.19.0"
  }

  trait SharedModule extends ScalaModule with CalibanSourceGenModule {

    def calibanSourcePath: Task[PathRef] = Task.Source(moduleDir / os.up / "shared" / "graphql")

    override def scalaVersion = "3.7.0"

    override def mvnDeps = super.mvnDeps() ++ Seq(
      mvn"com.github.ghostdogpr::caliban-client:${CalibanBuildInfo.calibanVersion}",
      mvn"com.github.ghostdogpr::caliban:${CalibanBuildInfo.calibanVersion}"
    )

    override def calibanFileSettings = Task {
      Seq(
        // Explicitly constrain to disambiguate
        CalibanFileSettings.forFile(os.rel / "schema.graphql")(
          _.withClientName("Client")
        ),
        // Another entry for the same file, which will cause another generator to run
        CalibanFileSettings.forFile(os.rel / "schema.graphql")(
          _.withGenType(CalibanGenType.Schema)
            .withScalarMappings("Json" -> "String")
            .withEffect("scala.util.Try")
            .withAddDerives(false)
        ),
        CalibanFileSettings.forFile(os.rel / "genview" / "schema.graphql")(
          _.withClientName("Client").withPackageName("genview").withGenView(true)
        )
      )
    }
  }

}
